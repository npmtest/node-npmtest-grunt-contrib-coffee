{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-coffee/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-coffee/lib.npmtest_grunt_contrib_coffee.js":"/* istanbul instrument in package npmtest_grunt_contrib_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_coffee = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_coffee = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-coffee/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-coffee && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_coffee\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_coffee.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_coffee.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_coffee.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_coffee.__dirname + '/lib.npmtest_grunt_contrib_coffee.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-coffee/node_modules/grunt-contrib-coffee/tasks/coffee.js":"/*\n * grunt-contrib-coffee\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 Eric Woroshow, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n  var path = require('path');\n  var chalk = require('chalk');\n  var _ = require('lodash');\n  var uriPath = require('uri-path');\n\n  grunt.registerMultiTask('coffee', 'Compile CoffeeScript files into JavaScript', function() {\n    var options = this.options({\n      bare: false,\n      join: false,\n      sourceMap: false,\n      joinExt: '.src.coffee',\n      separator: grunt.util.linefeed\n    });\n    var actionCounts = {\n      createdFile: 0,\n      createdMap: 0\n    };\n\n    options.separator = grunt.util.normalizelf(options.separator);\n\n    this.files.forEach(function(f) {\n      var validFiles = removeInvalidFiles(f);\n      \n      if (validFiles.length === 0) {\n        grunt.log.warn('Destination ' + chalk.cyan(f.dest) + ' not written because no source files were found.');\n        return;\n      }\n\n      if (options.sourceMap === true) {\n        var paths = createOutputPaths(f.dest);\n        // add sourceMapDir to options object\n        var fileOptions = _.extend({ sourceMapDir: paths.destDir }, options);\n        var writeResult = writeFileAndMap(paths, compileWithMaps(validFiles, fileOptions, paths), fileOptions);\n        actionCounts.createdFile += writeResult.createdFile;\n        actionCounts.createdMap += writeResult.createdMap;\n      } else if (options.join === true) {\n        actionCounts.createdFile += writeCompiledFile(f.dest, concatInput(validFiles, options));\n      } else {\n        actionCounts.createdFile += writeCompiledFile(f.dest, concatOutput(validFiles, options));\n      }\n    });\n\n    grunt.log.ok(actionCounts.createdFile + ' files created.');\n    if (actionCounts.createdMap > 0) {\n      grunt.log.ok(actionCounts.createdMap + ' source map files created.');\n    }\n  });\n\n  var isLiterate = function(ext) {\n    return ext === '.litcoffee' || ext === '.md';\n  };\n\n  var removeInvalidFiles = function(files) {\n    return files.src.filter(function(filepath) {\n      if (!grunt.file.exists(filepath)) {\n        grunt.log.warn('Source file \"' + filepath + '\" not found.');\n        return false;\n      }\n      return true;\n    });\n  };\n\n  var createOutputPaths = function(destination) {\n    var fileName = path.basename(destination, path.extname(destination));\n    return {\n      dest: destination,\n      destName: fileName,\n      destDir: appendTrailingSlash(path.dirname(destination)),\n      mapFileName: fileName + '.js.map'\n    };\n  };\n\n  var appendTrailingSlash = function(dirname) {\n    if (dirname.length > 0 && dirname.slice(-1) !== path.sep) {\n      return dirname + path.sep;\n    }\n    return dirname;\n  };\n\n  var compileWithMaps = function(files, options, paths) {\n    if (!hasUniformExtensions(files)) {\n      return;\n    }\n\n    var mapOptions, filepath;\n\n    if (files.length > 1) {\n      mapOptions = createOptionsForJoin(files, paths, options.separator, options.joinExt);\n    } else {\n      mapOptions = createOptionsForFile(files[0], paths, options);\n      filepath = files[0];\n    }\n\n    options = _.extend({\n      generatedFile: path.basename(paths.dest),\n      sourceRoot: uriPath(mapOptions.sourceRoot),\n      sourceFiles: mapOptions.sourceFiles\n    }, options);\n\n    var output = compileCoffee(mapOptions.code, options, filepath);\n    appendFooter(output, paths, options);\n    return output;\n  };\n\n  var hasUniformExtensions = function(files) {\n    // get all extensions for input files\n    var extensions = _.uniq(files.map(path.extname));\n\n    if (extensions.length > 1) {\n      grunt.fail.warn('Join and sourceMap options require input files share the same extension (found ' + extensions.join(', ') + ').');\n      return false;\n    }\n    return true;\n  };\n\n  var createOptionsForJoin = function (files, paths, separator, joinExt) {\n    var code = concatFiles(files, separator);\n    var targetFileName = paths.destName + joinExt;\n    grunt.file.write(paths.destDir + targetFileName, code);\n\n    return {\n      code: code,\n      sourceFiles: [targetFileName],\n      sourceRoot: ''\n    };\n  };\n\n  var concatFiles = function(files, separator) {\n    return files.map(grunt.file.read).join(separator);\n  };\n\n  var createOptionsForFile = function(file, paths, options) {\n    return {\n      code: grunt.file.read(file),\n      sourceFiles: [path.basename(file)],\n      sourceRoot: appendTrailingSlash(path.relative(options.sourceMapDir, path.dirname(file)))\n    };\n  };\n\n  var appendFooter = function(output, paths, options) {\n    // We need the sourceMappingURL to be relative to the JS path\n    var sourceMappingDir = appendTrailingSlash(path.relative(paths.destDir, options.sourceMapDir));\n    // Add sourceMappingURL to file footer\n    output.js = output.js + '\\n//# sourceMappingURL=' + uriPath(sourceMappingDir) + paths.mapFileName + '\\n';\n  };\n\n  var concatInput = function(files, options) {\n    if (hasUniformExtensions(files)) {\n      var code = concatFiles(files, options.separator);\n      return compileCoffee(code, options);\n    }\n  };\n\n  var concatOutput = function(files, options) {\n    return files.map(function(filepath) {\n      var code = grunt.file.read(filepath);\n      return compileCoffee(code, options, filepath);\n    }).join(options.separator);\n  };\n\n  var compileCoffee = function(code, options, filepath) {\n    var coffeeOptions = _.clone(options);\n    if (filepath) {\n      coffeeOptions.filename = filepath;\n      coffeeOptions.literate = isLiterate(path.extname(filepath));\n    } else {\n      coffeeOptions.literate = isLiterate(path.extname(options.joinExt));\n    }\n\n    try {\n      return require('coffee-script').compile(code, coffeeOptions);\n    } catch (e) {\n      if (e.location == null ||\n          e.location.first_column == null ||\n          e.location.first_line == null) {\n        grunt.log.error('Got an unexpected exception ' +\n                        'from the coffee-script compiler. ' +\n                        'The original exception was: ' +\n                        e);\n        grunt.log.error('(The coffee-script compiler should not raise *unexpected* exceptions. ' +\n                        'You can file this error as an issue of the coffee-script compiler: ' +\n                        'https://github.com/jashkenas/coffee-script/issues)');\n      } else {\n        var firstColumn = e.location.first_column;\n        var firstLine = e.location.first_line;\n        var codeLine = code.split('\\n')[firstLine];\n        var errorArrows = chalk.red('>>') + ' ';\n        var offendingCharacter;\n\n        if (firstColumn < codeLine.length) {\n          offendingCharacter = chalk.red(codeLine[firstColumn]);\n        } else {\n          offendingCharacter = '';\n        }\n\n        grunt.log.error(e);\n        grunt.log.error('In file: ' + filepath);\n        grunt.log.error('On line: ' + firstLine);\n        // log erroneous line and highlight offending character\n        // grunt.log.error trims whitespace so we have to use grunt.log.writeln\n        grunt.log.writeln(errorArrows + codeLine.substring(0, firstColumn) +\n                          offendingCharacter + codeLine.substring(firstColumn + 1));\n        grunt.log.writeln(errorArrows + grunt.util.repeat(firstColumn, ' ') +\n                          chalk.red('^'));\n      }\n      grunt.fail.warn('CoffeeScript failed to compile.');\n    }\n  };\n\n  var writeFileAndMap = function(paths, output, options) {\n    if (!output || output.js.length === 0) {\n      warnOnEmptyFile(paths.dest);\n      return;\n    }\n\n    var createdFile = writeCompiledFile(paths.dest, output.js);\n    options.sourceMapDir = appendTrailingSlash(options.sourceMapDir);\n    var createdMap = writeSourceMapFile(options.sourceMapDir + paths.mapFileName, output.v3SourceMap);\n\n    return {\n      createdFile: createdFile,\n      createdMap: createdMap\n    };\n  };\n\n  var warnOnEmptyFile = function(path) {\n    grunt.log.warn('Destination \"' + path + '\" not written because compiled files were empty.');\n  };\n\n  var writeFile = function(path, output) {\n    if (output.length < 1) {\n      warnOnEmptyFile(path);\n      return false;\n    }\n    grunt.file.write(path, output);\n    return true;\n  };\n\n  var writeCompiledFile = function(path, output) {\n    if (writeFile(path, output)) {\n      grunt.verbose.writeln('File ' + chalk.cyan(path) + ' created.');\n      return 1;\n    }\n    return 0;\n  };\n  var writeSourceMapFile = function(path, output) {\n    if (writeFile(path, output)) {\n      grunt.verbose.writeln('File ' + chalk.cyan(path) + ' created (source map).');\n      return 1;\n    }\n    return 0;\n  };\n};\n"}